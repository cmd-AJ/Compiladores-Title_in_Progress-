# Generated from MiniLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,114,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,5,18,93,8,18,10,18,12,
        18,96,9,18,1,19,4,19,99,8,19,11,19,12,19,100,1,20,3,20,104,8,20,
        1,20,1,20,1,21,4,21,109,8,21,11,21,12,21,110,1,21,1,21,0,0,22,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,1,0,4,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,9,9,32,
        32,117,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,
        0,7,51,1,0,0,0,9,53,1,0,0,0,11,55,1,0,0,0,13,57,1,0,0,0,15,59,1,
        0,0,0,17,61,1,0,0,0,19,63,1,0,0,0,21,65,1,0,0,0,23,68,1,0,0,0,25,
        71,1,0,0,0,27,73,1,0,0,0,29,75,1,0,0,0,31,78,1,0,0,0,33,81,1,0,0,
        0,35,84,1,0,0,0,37,90,1,0,0,0,39,98,1,0,0,0,41,103,1,0,0,0,43,108,
        1,0,0,0,45,46,5,61,0,0,46,2,1,0,0,0,47,48,5,58,0,0,48,4,1,0,0,0,
        49,50,5,123,0,0,50,6,1,0,0,0,51,52,5,125,0,0,52,8,1,0,0,0,53,54,
        5,40,0,0,54,10,1,0,0,0,55,56,5,41,0,0,56,12,1,0,0,0,57,58,5,42,0,
        0,58,14,1,0,0,0,59,60,5,47,0,0,60,16,1,0,0,0,61,62,5,43,0,0,62,18,
        1,0,0,0,63,64,5,45,0,0,64,20,1,0,0,0,65,66,5,61,0,0,66,67,5,61,0,
        0,67,22,1,0,0,0,68,69,5,33,0,0,69,70,5,61,0,0,70,24,1,0,0,0,71,72,
        5,60,0,0,72,26,1,0,0,0,73,74,5,62,0,0,74,28,1,0,0,0,75,76,5,60,0,
        0,76,77,5,61,0,0,77,30,1,0,0,0,78,79,5,62,0,0,79,80,5,61,0,0,80,
        32,1,0,0,0,81,82,5,105,0,0,82,83,5,102,0,0,83,34,1,0,0,0,84,85,5,
        119,0,0,85,86,5,104,0,0,86,87,5,105,0,0,87,88,5,108,0,0,88,89,5,
        101,0,0,89,36,1,0,0,0,90,94,7,0,0,0,91,93,7,1,0,0,92,91,1,0,0,0,
        93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,38,1,0,0,0,96,94,1,
        0,0,0,97,99,7,2,0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,
        100,101,1,0,0,0,101,40,1,0,0,0,102,104,5,13,0,0,103,102,1,0,0,0,
        103,104,1,0,0,0,104,105,1,0,0,0,105,106,5,10,0,0,106,42,1,0,0,0,
        107,109,7,3,0,0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,
        110,111,1,0,0,0,111,112,1,0,0,0,112,113,6,21,0,0,113,44,1,0,0,0,
        5,0,94,100,103,110,1,6,0,0
    ]

class MiniLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    MUL = 7
    DIV = 8
    ADD = 9
    SUB = 10
    EQ = 11
    NEQ = 12
    LT = 13
    GT = 14
    LE = 15
    GE = 16
    IF = 17
    WHILE = 18
    ID = 19
    INT = 20
    NEWLINE = 21
    WS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "':'", "'{'", "'}'", "'('", "')'", "'*'", "'/'", "'+'", 
            "'-'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'if'", 
            "'while'" ]

    symbolicNames = [ "<INVALID>",
            "MUL", "DIV", "ADD", "SUB", "EQ", "NEQ", "LT", "GT", "LE", "GE", 
            "IF", "WHILE", "ID", "INT", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "MUL", 
                  "DIV", "ADD", "SUB", "EQ", "NEQ", "LT", "GT", "LE", "GE", 
                  "IF", "WHILE", "ID", "INT", "NEWLINE", "WS" ]

    grammarFileName = "MiniLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


